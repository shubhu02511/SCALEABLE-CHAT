import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

import { SocketProvider } from "../context/SocketProvider";
// import { SocketProvider } from '../context/socket-provider'
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <SocketProvider>
        <body className={`${geistSans.variable} ${geistMono.variable}`}>
          {children}
        </body>
      </SocketProvider>
    </html>
  );
}


export const dynamic = "force-dynamic"; // Force dynamic rendering
export const revalidate = 0; // Disable revalidation
export const fetchCache = "force-no-store"; // Disable fetch cache
export const runtime = "nodejs"; // Use Node.js runtime
export const preferredRegion = "auto"; // Automatically select the preferred region
export const tags = ["socket", "nextjs", "react", "websockets"];
export const fetchPolicy = "no-cache"; // Disable fetch policy
export const dynamicParams = false; // Disable dynamic parameters
export const dynamicGeneration = "force-dynamic"; // Force dynamic generation
export const fetchCacheKey = "no-cache"; // Disable fetch cache key
export const revalidateTag = "no-cache"; // Disable revalidation tag
export const revalidateOnFocus = false; // Disable revalidation on focus
export const revalidateOnReconnect = false; // Disable revalidation on reconnect
export const revalidateOnMount = false; // Disable revalidation on mount
export const revalidateOnError = false; // Disable revalidation on error
export const revalidateOnSuccess = false; // Disable revalidation on success
export const revalidateOnUpdate = false; // Disable revalidation on update
export const revalidateOnChange = false; // Disable revalidation on change
export const revalidateOnDelete = false; // Disable revalidation on delete        